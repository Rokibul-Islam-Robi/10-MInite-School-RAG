import os

CHUNK_SIZE = 1000
CHUNK_OVERLAP = 500

CLEANED_TEXT_PATH = os.path.join(os.path.dirname(__file__), 'cleaned_text.txt')
CHUNKS_PATH = os.path.join(os.path.dirname(__file__), 'chunks.txt')


def chunk_text(text, chunk_size=CHUNK_SIZE, overlap=CHUNK_OVERLAP):
    chunks = []
    start = 0
    print(f"DEBUG: chunk_text received text of length: {len(text)}")
    if len(text) == 0:
        print("DEBUG: Input text to chunk_text is empty, returning no chunks.")
        return []

    while start < len(text):
        end = min(start + chunk_size, len(text))
        chunk = text[start:end]
        chunks.append(chunk)
        print(f"DEBUG: Created chunk from index {start} to {end}. Current chunks count: {len(chunks)}")
        if end == len(text):
            print("DEBUG: Reached end of text for chunking. Breaking loop.")
            break
        start += chunk_size - overlap
        if start >= len(text) and end < len(text): # Handle case where last chunk might not advance 'start' enough
            print("DEBUG: Adjusted start index for last chunk. Breaking loop.")
            break
        if chunk_size - overlap <= 0 and len(text) > 0:
            print("ERROR: Chunk size minus overlap is zero or negative. This will cause an infinite loop if text is not empty. Breaking.")
            break
    print(f"DEBUG: Final number of chunks generated by chunk_text: {len(chunks)}")
    return chunks

# The following __main__ block should be removed or commented out:
# if __name__ == "__main__":
#     with open(CLEANED_TEXT_PATH, 'r', encoding='utf-8') as f:
#         text = f.read()
#     chunks = chunk_text(text)
#     with open(CHUNKS_PATH, 'w', encoding='utf-8') as f:
#         for i, chunk in enumerate(chunks):
#             f.write(f"---chunk_{i}---\n{chunk}\n")
#     print(f"Chunked text into {len(chunks)} chunks. Saved to chunks.txt.")